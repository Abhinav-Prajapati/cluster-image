// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { UploadImagesData, UploadImagesResponses, UploadImagesErrors, GetAllImagesData, GetAllImagesResponses, DeleteImageData, DeleteImageResponses, DeleteImageErrors, GetImageFileData, GetImageFileResponses, GetImageFileErrors, GetImageThumbnailData, GetImageThumbnailResponses, GetImageThumbnailErrors, GetAllBatchesBatchesGetData, GetAllBatchesBatchesGetResponses, CreateBatchBatchesPostData, CreateBatchBatchesPostResponses, CreateBatchBatchesPostErrors, DeleteBatchBatchesBatchIdDeleteData, DeleteBatchBatchesBatchIdDeleteResponses, DeleteBatchBatchesBatchIdDeleteErrors, GetBatchDetailsBatchesBatchIdGetData, GetBatchDetailsBatchesBatchIdGetResponses, GetBatchDetailsBatchesBatchIdGetErrors, RenameBatchBatchesBatchIdPutData, RenameBatchBatchesBatchIdPutResponses, RenameBatchBatchesBatchIdPutErrors, RemoveImagesFromBatchBatchesBatchIdImagesDeleteData, RemoveImagesFromBatchBatchesBatchIdImagesDeleteResponses, RemoveImagesFromBatchBatchesBatchIdImagesDeleteErrors, AddImagesToBatchBatchesBatchIdImagesPostData, AddImagesToBatchBatchesBatchIdImagesPostResponses, AddImagesToBatchBatchesBatchIdImagesPostErrors, UploadAndAddToBatchBatchesBatchIdUploadAndAddPostData, UploadAndAddToBatchBatchesBatchIdUploadAndAddPostResponses, UploadAndAddToBatchBatchesBatchIdUploadAndAddPostErrors, AnalyzeBatchBatchesBatchIdAnalyzePutData, AnalyzeBatchBatchesBatchIdAnalyzePutResponses, AnalyzeBatchBatchesBatchIdAnalyzePutErrors, UpdateClustersBatchesBatchIdClustersPutData, UpdateClustersBatchesBatchIdClustersPutResponses, UpdateClustersBatchesBatchIdClustersPutErrors, ReadRootGetData, ReadRootGetResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Upload Images
 * Uploads one or more image files.
 * - Saves new images and triggers background processing.
 * - Detects duplicates based on file hash and returns existing image data.
 */
export const uploadImages = <ThrowOnError extends boolean = false>(options: Options<UploadImagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadImagesResponses, UploadImagesErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/images/upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Get All Images
 * Retrieves a list of all images in the database.
 */
export const getAllImages = <ThrowOnError extends boolean = false>(options?: Options<GetAllImagesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllImagesResponses, unknown, ThrowOnError>({
        url: '/images/',
        ...options
    });
};

/**
 * Delete Image
 * Deletes an image's database record and its physical files.
 */
export const deleteImage = <ThrowOnError extends boolean = false>(options: Options<DeleteImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteImageResponses, DeleteImageErrors, ThrowOnError>({
        url: '/images/{image_id}',
        ...options
    });
};

/**
 * Get Image File
 * Returns the original image file.
 */
export const getImageFile = <ThrowOnError extends boolean = false>(options: Options<GetImageFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetImageFileResponses, GetImageFileErrors, ThrowOnError>({
        url: '/images/{image_id}',
        ...options
    });
};

/**
 * Get Thumbnail File
 * Returns the thumbnail file for an image.
 */
export const getImageThumbnail = <ThrowOnError extends boolean = false>(options: Options<GetImageThumbnailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetImageThumbnailResponses, GetImageThumbnailErrors, ThrowOnError>({
        url: '/images/thumbnail/{image_id}',
        ...options
    });
};

/**
 * Get All Batches
 * Retrieves a list of all clustering batches with full image details.
 */
export const getAllBatchesBatchesGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllBatchesBatchesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllBatchesBatchesGetResponses, unknown, ThrowOnError>({
        url: '/batches/',
        ...options
    });
};

/**
 * Create Batch
 * Creates a new, unprocessed batch record with a list of image IDs.
 */
export const createBatchBatchesPost = <ThrowOnError extends boolean = false>(options: Options<CreateBatchBatchesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateBatchBatchesPostResponses, CreateBatchBatchesPostErrors, ThrowOnError>({
        url: '/batches/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Batch
 * Deletes an existing batch.
 */
export const deleteBatchBatchesBatchIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteBatchBatchesBatchIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteBatchBatchesBatchIdDeleteResponses, DeleteBatchBatchesBatchIdDeleteErrors, ThrowOnError>({
        url: '/batches/{batch_id}',
        ...options
    });
};

/**
 * Get Batch Details
 * Gets all information about a specific batch by its ID.
 */
export const getBatchDetailsBatchesBatchIdGet = <ThrowOnError extends boolean = false>(options: Options<GetBatchDetailsBatchesBatchIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBatchDetailsBatchesBatchIdGetResponses, GetBatchDetailsBatchesBatchIdGetErrors, ThrowOnError>({
        url: '/batches/{batch_id}',
        ...options
    });
};

/**
 * Rename Batch
 * Renames an existing batch.
 */
export const renameBatchBatchesBatchIdPut = <ThrowOnError extends boolean = false>(options: Options<RenameBatchBatchesBatchIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RenameBatchBatchesBatchIdPutResponses, RenameBatchBatchesBatchIdPutErrors, ThrowOnError>({
        url: '/batches/{batch_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove Images From Batch
 * Removes one or more images from an existing batch.
 */
export const removeImagesFromBatchBatchesBatchIdImagesDelete = <ThrowOnError extends boolean = false>(options: Options<RemoveImagesFromBatchBatchesBatchIdImagesDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveImagesFromBatchBatchesBatchIdImagesDeleteResponses, RemoveImagesFromBatchBatchesBatchIdImagesDeleteErrors, ThrowOnError>({
        url: '/batches/{batch_id}/images',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add Images To Batch
 * Adds one or more images to an existing batch.
 */
export const addImagesToBatchBatchesBatchIdImagesPost = <ThrowOnError extends boolean = false>(options: Options<AddImagesToBatchBatchesBatchIdImagesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddImagesToBatchBatchesBatchIdImagesPostResponses, AddImagesToBatchBatchesBatchIdImagesPostErrors, ThrowOnError>({
        url: '/batches/{batch_id}/images',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Upload And Add To Batch
 * Uploads one or more images and adds them to a specific batch.
 */
export const uploadAndAddToBatchBatchesBatchIdUploadAndAddPost = <ThrowOnError extends boolean = false>(options: Options<UploadAndAddToBatchBatchesBatchIdUploadAndAddPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadAndAddToBatchBatchesBatchIdUploadAndAddPostResponses, UploadAndAddToBatchBatchesBatchIdUploadAndAddPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/batches/{batch_id}/upload-and-add',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Analyze Batch
 * Runs (or re-runs) the clustering analysis on a batch.
 */
export const analyzeBatchBatchesBatchIdAnalyzePut = <ThrowOnError extends boolean = false>(options: Options<AnalyzeBatchBatchesBatchIdAnalyzePutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AnalyzeBatchBatchesBatchIdAnalyzePutResponses, AnalyzeBatchBatchesBatchIdAnalyzePutErrors, ThrowOnError>({
        url: '/batches/{batch_id}/analyze',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Clusters
 * Manually updates the cluster assignments for a batch.
 * Validates that the new cluster map contains the exact same set of images
 * as the batch itself.
 */
export const updateClustersBatchesBatchIdClustersPut = <ThrowOnError extends boolean = false>(options: Options<UpdateClustersBatchesBatchIdClustersPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateClustersBatchesBatchIdClustersPutResponses, UpdateClustersBatchesBatchIdClustersPutErrors, ThrowOnError>({
        url: '/batches/{batch_id}/clusters',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Root
 * A simple health check endpoint.
 */
export const readRootGet = <ThrowOnError extends boolean = false>(options?: Options<ReadRootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadRootGetResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};